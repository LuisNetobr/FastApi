Contribuidores:


Luís Cardoso


Fiquei responsável por gerenciar a equipe e auxiliar todos como o líder do projeto, através disso fiz uso do conhecimento abordado em sala pra auxiliar aqueles que tiveram dificuldades com o uso do github e  do docker, também separei a função pra cada um com base em suas aptidões para assim ter uma melhor perfomance na hora de desenvolver o código, também ajudei em algumas correções no código que estavam dando erros e fiz testes para verificar seu funcionamento.


Lucas Emanuel

Assumi uma responsabilidade significativa em diversas áreas, Inicialmente fui responsável pela criação da estrutura básica do sistema,Para que meu grupo pudesse começar o projeto adequadamente . Além disso, desenvolvi o Docker para o mercadinho, configurando os contêineres e otimizando o ambiente. Também desempenhei um papel crucial na criação das funções CRUD, colaborando e auxiliando com a equipe para garantir que as operações com banco de dados estivessem funcionando corretamente


BRUNO MARCEL

Minha responsabilidade foi documentar 2 partes essenciais do projeto: módulo routers e módulo schemas da aplicação. 

Documentação dos Routers

A documentação do arquivo some_router.py foi um dos principais focos. Este arquivo define as rotas da API relacionadas ao gerenciamento de produtos, utilizando o framework FastAPI.

Criação de Produto: Expliquei como a aplicação permite a criação de novos produtos através de uma rota específica que aceita dados de entrada e retorna o produto criado.

Leitura de Produtos: Documentei as rotas que permitem obter tanto uma lista de produtos quanto um produto específico pelo seu ID, detalhando como a aplicação recupera esses dados do banco de dados.

Atualização de Produto: Descrevi o processo de atualização de um produto existente, explicando a rota e como os dados são validados e persistidos no banco de dados.

Exclusão de Produto: Documentei a rota que permite deletar um produto, incluindo o tratamento de exceções caso o produto não seja encontrado.

Documentação dos Schemas

Além dos routers, também documentei o arquivo principal dos schemas. Os schemas são responsáveis pela validação dos dados que entram e saem da aplicação, garantindo que a API manipule apenas dados corretos e no formato esperado.




Juan Nascimento

Minha função neste projeto foi desenvolver as rotas da nossa API. Fiquei responsável por implementar as seguintes funcionalidades:

create_product: Rota responsável pela criação de novos produtos e pelo cadastro dos mesmos no banco de dados.

read_product: Rota que permite a consulta de um produto específico no banco de dados, utilizando seu ID.

read_products: Rota que recupera e lista todos os produtos disponíveis no banco de dados.

update_product: Rota destinada à atualização das informações de um produto específico, identificado pelo seu ID, no banco de dados.

delete_product: Rota que remove um produto do banco de dados com base em seu ID.

VINCIUS LEITE VIEIRA
 
RESPONSÁVEL PELO O DESENVOLVIMENTO DAS ROTAS DA API:
 
 
Fiquei responsável por definir as rotas dos produtos que tem por base a maneira que os produtos se comportam na aplicação,
 
Arquivo `routes.py`
 
Essas Rotas são :
 
DELETE/
CADASTRAR /
CRIAR/
 
Cada rota dessas demonstra a forma como a aplicação do produto se comporta na api.
 
 




ROBERT EVERTHON

Minha função foi realizar a documentação do projeto, especificamente dos módulos main, database, crud_product e product.

Documentação do main:
Na documentação do main, basicamente importamos os módulos, bibliotecas e as classes que fizemos,
criamos uma instância e uma função para executar a oplicação.

Documentação do database:
Aqui documentei a ligação com o banco de dados importando a biblioteca "sqlalchemy",
que contem as ferramentas necessárias para interagir com o banco de dados.

Documentação do product:
coloquei a documentação do "product", aqui é onde se tem as instruções para criar o objeto "produto" que vamos
utilizar no crud.

Documentação do crud_product:
Aqui documentei, o CRUD do produto, que recebe como base a classe product que criamos para adicionar,
buscar, atualizar e procurar os produtos no banco de dados.







"Cada pessoa descreveu sua função conforme seu ponto de vista"
